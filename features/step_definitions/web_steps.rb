# TL;DR: YOU SHOULD DELETE THIS FILE
#
# This file was generated by Cucumber-Rails and is only here to get you a head start
# These step definitions are thin wrappers around the Capybara/Webrat API that lets you
# visit pages, interact with widgets and make assertions about page content.
#
# If you use these step definitions as basis for your features you will quickly end up
# with features that are:
#
# * Hard to maintain
# * Verbose to read
#
# A much better approach is to write your own higher level step definitions, following
# the advice in the following blog posts:
#
# * http://benmabey.com/2008/05/19/imperative-vs-declarative-scenarios-in-user-stories.html
# * http://dannorth.net/2011/01/31/whose-domain-is-it-anyway/
# * http://elabs.se/blog/15-you-re-cuking-it-wrong
#


require 'uri'
require 'cgi'
require File.expand_path(File.join(File.dirname(__FILE__), "..", "support", "paths"))
require File.expand_path(File.join(File.dirname(__FILE__), "..", "support", "selectors"))

module WithinHelpers
  def with_scope(locator)
    locator ? within(*selector_for(locator)) { yield } : yield
  end
end
World(WithinHelpers)

# Single-line step scoper
When /^(.*) within (.*[^:])$/ do |step, parent|
  with_scope(parent) { When step }
end

# Multi-line step scoper
When /^(.*) within (.*[^:]):$/ do |step, parent, table_or_string|
  with_scope(parent) { When "#{step}:", table_or_string }
end

Given /^(?:|I )am on (.+)$/ do |page_name|
  visit path_to(page_name)
end

When /^(?:|I )go to (.+)$/ do |page_name|
  visit path_to(page_name)
end

When /^(?:|I )press "([^"]*)"$/ do |button|
  click_button(button)
end

When /^(?:|I )follow "([^"]*)"$/ do |link|
  click_link(link)
end

When /^(?:|I )fill in "([^"]*)" with "([^"]*)"$/ do |field, value|
  fill_in(field, :with => value)
end

When /^(?:|I )fill in "([^"]*)" for "([^"]*)"$/ do |value, field|
  fill_in(field, :with => value)
end

# When I select "April 26, 1982" as the "Date of Birth" date

When /^I select "(.*)" as the "(.*)" date$/ do |date, date_label|
  select_date(date, :from => date_label)
end


# Use this to fill in an entire form with data from a table. Example:
#
#   When I fill in the following:
#     | Account Number | 5002       |
#     | Expiry date    | 2009-11-01 |
#     | Note           | Nice guy   |
#     | Wants Email?   |            |
#
# TODO: Add support for checkbox, select or option
# based on naming conventions.
#
When /^(?:|I )fill in the following:$/ do |fields|
  fields.rows_hash.each do |name, value|
    When %{I fill in "#{name}" with "#{value}"}
  end
end

When /^(?:|I )select "([^"]*)" from "([^"]*)"$/ do |value, field|
  select(value, :from => field)
end

When /^(?:|I )check "([^"]*)"$/ do |field|
  check(field)
end

When /^(?:|I )uncheck "([^"]*)"$/ do |field|
  uncheck(field)
end

When /^(?:|I )choose "([^"]*)"$/ do |field|
  choose(field)
end

When /^(?:|I )attach the file "([^"]*)" to "([^"]*)"$/ do |path, field|
  attach_file(field, File.expand_path(path))
end

Then /^(?:|I )should see "([^"]*)"$/ do |text|
  if page.respond_to? :should
    page.should have_content(text)
  else
    assert page.has_content?(text)
  end
end

Then /^(?:|I )should see \/([^\/]*)\/$/ do |regexp|
  regexp = Regexp.new(regexp)

  if page.respond_to? :should
    page.should have_xpath('//*', :text => regexp)
  else
    assert page.has_xpath?('//*', :text => regexp)
  end
end

Then /^(?:|I )should not see "([^"]*)"$/ do |text|
  if page.respond_to? :should
    page.should have_no_content(text)
  else
    assert page.has_no_content?(text)
  end
end

Then /^(?:|I )should not see \/([^\/]*)\/$/ do |regexp|
  regexp = Regexp.new(regexp)

  if page.respond_to? :should
    page.should have_no_xpath('//*', :text => regexp)
  else
    assert page.has_no_xpath?('//*', :text => regexp)
  end
end

Then /^the "([^"]*)" field(?: within (.*))? should contain "([^"]*)"$/ do |field, parent, value|
  with_scope(parent) do
    field = find_field(field)
    field_value = (field.tag_name == 'textarea') ? field.text : field.value
    if field_value.respond_to? :should
      field_value.should =~ /#{value}/
    else
      assert_match(/#{value}/, field_value)
    end
  end
end

Then /^the "([^"]*)" field(?: within (.*))? should not contain "([^"]*)"$/ do |field, parent, value|
  with_scope(parent) do
    field = find_field(field)
    field_value = (field.tag_name == 'textarea') ? field.text : field.value
    if field_value.respond_to? :should_not
      field_value.should_not =~ /#{value}/
    else
      assert_no_match(/#{value}/, field_value)
    end
  end
end

Then /^the "([^"]*)" field should have the error "([^"]*)"$/ do |field, error_message|
  element = find_field(field)
  classes = element.find(:xpath, '..')[:class].split(' ')

  form_for_input = element.find(:xpath, 'ancestor::form[1]')
  using_formtastic = form_for_input[:class].include?('formtastic')
  error_class = using_formtastic ? 'error' : 'field_with_errors'

  if classes.respond_to? :should
    classes.should include(error_class)
  else
    assert classes.include?(error_class)
  end

  if page.respond_to?(:should)
    if using_formtastic
      error_paragraph = element.find(:xpath, '../*[@class="inline-errors"][1]')
      error_paragraph.should have_content(error_message)
    else
      page.should have_content("#{field.titlecase} #{error_message}")
    end
  else
    if using_formtastic
      error_paragraph = element.find(:xpath, '../*[@class="inline-errors"][1]')
      assert error_paragraph.has_content?(error_message)
    else
      assert page.has_content?("#{field.titlecase} #{error_message}")
    end
  end
end

Then /^the "([^"]*)" field should have no error$/ do |field|
  element = find_field(field)
  classes = element.find(:xpath, '..')[:class].split(' ')
  if classes.respond_to? :should
    classes.should_not include('field_with_errors')
    classes.should_not include('error')
  else
    assert !classes.include?('field_with_errors')
    assert !classes.include?('error')
  end
end

Then /^the "([^"]*)" checkbox(?: within (.*))? should be checked$/ do |label, parent|
  with_scope(parent) do
    field_checked = find_field(label)['checked']
    if field_checked.respond_to? :should
      field_checked.should be_true
    else
      assert field_checked
    end
  end
end

Then /^the "([^"]*)" checkbox(?: within (.*))? should not be checked$/ do |label, parent|
  with_scope(parent) do
    field_checked = find_field(label)['checked']
    if field_checked.respond_to? :should
      field_checked.should be_false
    else
      assert !field_checked
    end
  end
end

Then /^(?:|I )should be on (.+)$/ do |page_name|
  current_path = URI.parse(current_url).path
  if current_path.respond_to? :should
    current_path.should == path_to(page_name)
  else
    assert_equal path_to(page_name), current_path
  end
end

Then /^(?:|I )should have the following query string:$/ do |expected_pairs|
  query = URI.parse(current_url).query
  actual_params = query ? CGI.parse(query) : {}
  expected_params = {}
  expected_pairs.rows_hash.each_pair{|k,v| expected_params[k] = v.split(',')}

  if actual_params.respond_to? :should
    actual_params.should == expected_params
  else
    assert_equal expected_params, actual_params
  end
end

Then /^show me the page$/ do
  save_and_open_page
end


Then /^my user city has GPS coordinates$/ do
  Account.last.latitude != nil && Account.last.longitude != nil
end


Given /^I am a registered user$/ do
  @user = Account.create!({:uid => 1, :email => "mariorossi@mariorossi.com", :first_name => "Mario", :address => "Milan, Italy", :latitude => 45.464664, :longitude => 9.188540, :birthday => "1990-01-01 00:00:00", :last_name => "Rossi", :username => "mariorossi", :password => "123456", :password_confirmation => "123456" })
end

Given /^there's another user$/ do
  @anotheruser = Account.create!({:uid => 2, :email => "antoniobianchi@antoniobianchi.com", :first_name => "Antonio", :address => "Rome, Italy", :latitude => 41.902782, :longitude => 12.496366, :birthday => "1992-01-01 00:00:00", :last_name => "Bianchi", :username => "antoniobianchi", :password => "123456", :password_confirmation => "123456" })
end

When /^I log in$/ do
  steps %Q{
    Given I am on the login page
    When I fill in "Email" with "mariorossi@mariorossi.com"
    And I fill in "Password" with "123456"
    And I press "Accedi"
    Then I should be on the home page
    And I should see "Bentornato mariorossi"
  }
end

When /^he logs in$/ do
  steps %Q{
    Given I am on the login page
    When I fill in "Email" with "antoniobianchi@antoniobianchi.com"
    And I fill in "Password" with "123456"
    And I press "Accedi"
    Then I should be on the home page
    And I should see "Bentornato antoniobianchi"
  }
end

When /^he logs out$/ do
  steps %Q{
    Given I should see "Esci"
    When I follow "Esci"
    Then I should be on the home page
  }
end

When /^I log out$/ do
    steps %Q{
     Given I should see "Esci"
     When I follow "Esci"
     Then I should be on the home page
    }
end


Given /^a post of mine exists$/ do
  @post = Post.create!({:post => "Post inserito da mariorossi", :created_at => "2020-01-01 00:00:00.000000", :updated_at => "2020-01-01 00:00:00.000000", :account_id => 1 })
end

Given /^a post by this user exists$/ do
    @post = Post.create!({:post => "Post inserito da antoniobianchi", :created_at => "2020-01-01 00:00:00.000000", :updated_at => "2020-01-01 00:00:00.000000", :account_id => 2 })
end

Given /^my comment to that post exists$/ do
    @reply = Reply.create!({:reply => "Commento inserito da mariorossi", :created_at => "2020-01-01 00:00:00.000000", :updated_at => "2020-01-01 00:00:00.000000", :account_id => 1, :post_id => @post.id })
end

Given /^another user comment to that post exists$/ do
    @reply = Reply.create!({:reply => "Commento inserito da antoniobianchi", :created_at => "2020-01-01 00:00:00.000000", :updated_at => "2020-01-01 00:00:00.000000", :account_id => 2, :post_id => @post.id })
end

Given /^I have admin permissions$/ do
    @user.add_role "admin"
end

When /^I edit that comment$/ do
    visit edit_post_reply_path(@reply.post, @reply)
end

When /^I see that post$/ do
    visit post_path(@post)
end

When /^I like that post$/ do
    visit post_likes_path(@post)
end

When /^I edit that post$/ do
  visit edit_post_path(@post)
end

When /^I delete that post$/ do
  visit delete_post_path(@post)
end

Given /^he create a post$/ do
 steps %Q{
    Then I should see "Board"
    When I follow "Board"
    Then I should see "Messaggio"
    And I fill in "post[post]" with "Messaggio di antoniobianchi"
    And I press "Invia"
    Then I should see "Post di antoniobianchi"
    And I should see "Messaggio di antoniobianchi"
    }
end
